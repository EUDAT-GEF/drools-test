package eu.eudat.drools.core;
import org.json.JSONObject;

dialect "java"
rule "User has a single container"
   when
       JSONObject ($config: this)
       JSONObject ($stat: this.getJSONObject("statistics"))
       JSONObject ($stat.getLong("userRunningJobs")==1)
   then
       JSONObject env = new JSONObject();
       if ($config.has("environment")) {
            env = $config.getJSONObject("environment");
       }
       JSONObject limits = new JSONObject();
       if (env.has("limits")) {
            limits = env.getJSONObject("limits");
       }
       limits.put("memory", limits.getLong("memory")*2);
       limits.put("memorySwap", limits.getLong("memorySwap")*2);

       env.put("limits", limits);
       $config.put("environment", env);
end


rule "User has too many running containers"
   when
       JSONObject ($config: this)
       JSONObject ($stat: this.getJSONObject("statistics"))
       JSONObject ($limits: this.getJSONObject("environment").getJSONObject("limits"))
       JSONObject ($stat.getLong("userRunningJobs")>1)
   then
       JSONObject env = new JSONObject();
       if ($config.has("environment")) {
           env = $config.getJSONObject("environment");
       }
       JSONObject limits = new JSONObject();
       if (env.has("limits")) {
           limits = env.getJSONObject("limits");
       }
       limits.put("memory", limits.getLong("memory")/2);
       limits.put("memorySwap", limits.getLong("memorySwap")/2);

       JSONObject timeouts = new JSONObject();
       if (env.has("timeouts")) {
           timeouts = env.getJSONObject("timeouts");
       }
       timeouts.put("jobExecution", timeouts.getLong("jobExecution")/2);

       env.put("limits", limits);
       env.put("timeouts", timeouts);
       $config.put("environment", env);
end

rule "GEF has too many running containers"
   when
       JSONObject ($config: this)
       JSONObject ($stat: this.getJSONObject("statistics"))
       JSONObject ($stat.getLong("totalRunningJobs")>1)
   then
       JSONObject env = new JSONObject();
       if ($config.has("environment")) {
          env = $config.getJSONObject("environment");
       }

       JSONObject timeouts = new JSONObject();
       if (env.has("timeouts")) {
          timeouts = env.getJSONObject("timeouts");
       }
       timeouts.put("preparation", timeouts.getLong("preparation")*2);
       env.put("timeouts", timeouts);
       $config.put("environment", env);
end